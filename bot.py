import asyncio
import json
import os
import logging
from pathlib import Path
from time import time
from typing import Dict, Any
from aiogram.types import Update
from aiogram.enums.chat_member_status import ChatMemberStatus
from aiogram.enums.chat_member_status import ChatMemberStatus
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup,
    InlineKeyboardButton, ChatJoinRequest
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramForbiddenError
from dotenv import load_dotenv
load_dotenv()
from aiohttp import web
from aiogram import Bot, Dispatcher, Router, F

logging.basicConfig(level=logging.INFO)

# ========= ENV / INIT =========
BASE_DIR = Path(__file__).parent
DATA_DIR = BASE_DIR / "data"
DATA_DIR.mkdir(parents=True, exist_ok=True)

load_dotenv()
BOT_TOKEN   = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is required")
RUN_MODE = os.getenv("RUN_MODE", "polling")  # "webhook" on Render, "polling" locally
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "supersecret")
RENDER_EXTERNAL_URL = os.getenv("https://p2p-bot-58zg.onrender.com")  # e.g. https://<service>.onrender.com
SITE_URL    = os.getenv("SITE_URL", "https://koszoz19.github.io/p2p/")
LESSON_URL  = os.getenv("LESSON_URL", SITE_URL)
CHANNEL_ID  = int(os.getenv("CHANNEL_ID", "0") or 0)  # –∑–∞–ø–∞—Å–Ω–æ–π ID –∫–∞–Ω–∞–ª–∞ (-100...)
PORT = int(os.getenv("PORT", "10000"))

# –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —É—Ä–æ–∫–∏
LESSON1_URL = os.getenv("LESSON1_URL", LESSON_URL)
LESSON2_URL = os.getenv("LESSON2_URL", LESSON_URL)
LESSON3_URL = os.getenv("LESSON3_URL", LESSON_URL)

# --- –±–∞–Ω–Ω–µ—Ä—ã (–∏–∑ .env) ---
BANNER_WELCOME = os.getenv("BANNER_WELCOME", "")  # –±–∞–Ω–Ω–µ—Ä –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
BANNER_AFTER1  = os.getenv("BANNER_AFTER1",  "")  # –±–∞–Ω–Ω–µ—Ä –ø–æ—Å–ª–µ —É—Ä–æ–∫–∞ 1
BANNER_AFTER2  = os.getenv("BANNER_AFTER2",  "")  # –±–∞–Ω–Ω–µ—Ä –ø–æ—Å–ª–µ —É—Ä–æ–∫–∞ 2
BANNER_BLOCK6  = os.getenv("BANNER_BLOCK6",  "")
BANNER_BLOCK7  = os.getenv("BANNER_BLOCK7",  "")

# --- –±–∞–Ω–Ω–µ—Ä—ã (–∏–∑ .env) ---
BANNER_WELCOME = os.getenv("BANNER_WELCOME", "")  # –±–∞–Ω–Ω–µ—Ä –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
BANNER_AFTER1  = os.getenv("BANNER_AFTER1",  "")  # –±–∞–Ω–Ω–µ—Ä –ø–æ—Å–ª–µ —É—Ä–æ–∫–∞ 1
BANNER_AFTER2  = os.getenv("BANNER_AFTER2",  "")  # –±–∞–Ω–Ω–µ—Ä –ø–æ—Å–ª–µ —É—Ä–æ–∫–∞ 2
BANNER_BLOCK6  = os.getenv("BANNER_BLOCK6",  "")
BANNER_BLOCK7  = os.getenv("BANNER_BLOCK7",  "")

L3_FOLLOWUP_VIDEO   = os.getenv("L3_FOLLOWUP_VIDEO", "")
L3_FOLLOWUP_CAPTION = os.getenv("L3_FOLLOWUP_CAPTION", "")
L3_FOLLOWUP_DELAY   = int(os.getenv("L3_FOLLOWUP_DELAY", "10"))

DIARY_TG_CHAT_ID = int(os.getenv("DIARY_TG_CHAT_ID", "0") or 0)
DIARY_TG_JOIN_URL = os.getenv("DIARY_TG_JOIN_URL", "")

# --- helper –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–ª–æ–∫–∞ (–±–∞–Ω–Ω–µ—Ä + —Ç–µ–∫—Å—Ç) ---
async def send_block(chat_id: int, banner_url: str, text: str,
                     reply_markup=None, parse_mode=ParseMode.MARKDOWN):
    try:
        if banner_url:
            await bot.send_photo(chat_id, banner_url, caption=text, reply_markup=reply_markup)
        else:
            await bot.send_message(chat_id, text, reply_markup=reply_markup, parse_mode=parse_mode)
    except Exception:
        await bot.send_message(chat_id, text, reply_markup=reply_markup, parse_mode=parse_mode)

# --- –∫–Ω–æ–ø–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ) ---
def kb_access() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üîë –ü–û–õ–£–ß–ò–¢–¨ –î–û–°–¢–£–ü", callback_data="open:1"))
    return kb.as_markup()

def kb_open(n: int) -> InlineKeyboardMarkup:
    labels = {1: "–û–¢–ö–†–´–¢–¨ –£–†–û–ö 1", 2: "–û–¢–ö–†–´–¢–¨ –£–†–û–ö 2", 3: "–û–¢–ö–†–´–¢–¨ –£–†–û–ö 3"}
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text=labels[n], callback_data=f"open:{n}"))
    return kb.as_markup()

def kb_open_l2() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="–û–¢–ö–†–´–¢–¨ –£–†–û–ö 2", callback_data="open:2"))
    return kb.as_markup()

def kb_diary_then_l3() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üìì –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–Ω–µ–≤–Ω–∏–∫", url=DIARY_URL))
    kb.row(InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è ‚Äî –û–¢–ö–†–´–¢–¨ –£–†–û–ö 3", callback_data="open:3"))
    return kb.as_markup()

def kb_buy_course() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üî• –í–∑—è—Ç—å –º–∏–Ω–∏-–∫—É—Ä—Å (999 –≥—Ä–Ω)", url=SITE_URL))
    return kb.as_markup()

def kb_apply_form() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", url=FORM_URL))
    return kb.as_markup()
async def _send_l3_video_later(chat_id: int, delay: int = None):
    """–ß–µ—Ä–µ–∑ delay —Å–µ–∫. –ø—ñ—Å–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —É—Ä–æ–∫—É 3 –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–µ–æ –°—Ç–∞—Å–∞ (—è–∫—â–æ –∑–∞–¥–∞–Ω–æ)."""
    if not L3_FOLLOWUP_VIDEO:
        return
    await asyncio.sleep(delay if delay is not None else L3_FOLLOWUP_DELAY)
    try:
        # –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å —è–∫ –≤—ñ–¥–µ–æ (file_id –∞–±–æ –ø—Ä—è–º–∏–π mp4-URL)
        await bot.send_video(chat_id, L3_FOLLOWUP_VIDEO, caption=L3_FOLLOWUP_CAPTION or None)
    except Exception:
        # fallback: –ø—Ä–æ—Å—Ç–æ –ª—ñ–Ω–∫/—Ç–µ–∫—Å—Ç, —è–∫—â–æ —Ü–µ –Ω–µ file_id –∞–±–æ –Ω–µ mp4
        text = L3_FOLLOWUP_CAPTION + ("\n" if L3_FOLLOWUP_CAPTION else "")
        text += L3_FOLLOWUP_VIDEO
        try:
            await bot.send_message(chat_id, text, disable_web_page_preview=False)
        except Exception as e:
            logging.warning("L3 followup video send failed: %s", e)
# –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
REM1_DELAY = int(os.getenv("REM1_DELAY", "120"))  # –Ω–∞–ø–æ–º–Ω–∏—Ç—å –ø—Ä–æ —É—Ä–æ–∫ 1 (–ø–æ—Å–ª–µ —Ç–∏–∑–µ—Ä–∞)
REM2_DELAY = int(os.getenv("REM2_DELAY", "300"))  # –Ω–∞–ø–æ–º–Ω–∏—Ç—å –ø—Ä–æ —É—Ä–æ–∫ 2
REM3_DELAY = int(os.getenv("REM3_DELAY", "600"))  # –Ω–∞–ø–æ–º–Ω–∏—Ç—å –ø—Ä–æ —É—Ä–æ–∫ 3

# –±—ã—Å—Ç—Ä—ã–µ –ø–∞—É–∑—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–∏–∑–µ—Ä–∞ (–ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–∫—É)
NEXT_AFTER_1 = int(os.getenv("NEXT_AFTER_1", "8"))
NEXT_AFTER_2 = int(os.getenv("NEXT_AFTER_2", "8"))

# –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏ –¥–æ –Ω–∞–∂–∞—Ç–∏—è ¬´–ü–û–õ–£–ß–ò–¢–¨ –î–û–°–¢–£–ü¬ª
ACCESS_REM_DELAYS = [
    int(x) for x in os.getenv("ACCESS_REM_DELAYS", "120,300,900").split(",")
    if x.strip().isdigit()
]

ADMIN_ID = int(os.getenv("ADMIN_ID", "0") or 0)

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is required in .env")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
router = Router()
DEEP_LINK = ""  # –∑–∞–ø–æ–ª–Ω–∏–º –≤ main()
PENDING_JOIN: dict[int, int] = {}  # user_id -> chat_id (–∫–∞–Ω–∞–ª), –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ approve

# ========= –•–†–ê–ù–ò–õ–ö–ê –ü–†–û–ì–†–ï–°–°–ê (—Ñ–∞–π–ª) =========
stats_file = DATA_DIR / "stats.json"
if not stats_file.exists():
    stats_file.write_text(json.dumps({"users": {}}, ensure_ascii=False, indent=2))

def _read() -> Dict[str, Any]:
    try:
        return json.loads(stats_file.read_text() or "{}")
    except Exception:
        return {"users": {}}

def _write(d: Dict[str, Any]):
    stats_file.write_text(json.dumps(d, ensure_ascii=False, indent=2))

def get_stage(uid: int) -> int:
    d = _read()
    return int(d.get("users", {}).get(str(uid), {}).get("stage", 0))

def set_stage(uid: int, stage: int):
    d = _read()
    u = d.setdefault("users", {}).setdefault(str(uid), {})
    u["stage"] = stage
    u["ts"] = int(time())
    _write(d)

def set_pm_ok(uid: int, ok: bool):
    d = _read()
    u = d.setdefault("users", {}).setdefault(str(uid), {})
    u["pm_ok"] = bool(ok)
    _write(d)

def can_pm(uid: int) -> bool:
    d = _read()
    return bool(d.get("users", {}).get(str(uid), {}).get("pm_ok", False))

# ========= –ö–ù–û–ü–ö–ò =========
async def run_polling():
    dp = Dispatcher()
    dp.include_router(router)
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
@router.chat_join_request()
async def on_join_request(req: ChatJoinRequest):
    uid = req.from_user.id

    # –µ—Å–ª–∏ —ç—Ç–æ —Ç–≤–æ–π –î–ù–ï–í–ù–ò–ö (–∫–∞–Ω–∞–ª —Å –∑–∞—è–≤–∫–∞–º–∏)
    if DIARY_TG_CHAT_ID and req.chat.id == DIARY_TG_CHAT_ID:
        # —Ñ–∏–∫—Å–∏—Ä—É–µ–º, —á—Ç–æ —é–∑–µ—Ä –û–¢–ü–†–ê–í–ò–õ –ó–ê–Ø–í–ö–£
        set_diary_request(uid, True)
        # (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –º–æ–∂–Ω–æ –º–æ–ª—á–∞, –±–µ–∑ PM
        logging.info("Diary join-request captured for uid=%s", uid)
        return

    # ... –Ω–∏–∂–µ –æ—Å—Ç–∞–≤—å —Ç–≤–æ—é –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —Å –∏–Ω—Ç–µ–Ω—Å–∏–≤–æ–º (—Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º)
    PENDING_JOIN[uid] = req.chat.id
    set_stage(uid, 0)
    try:
        await send_block(uid, BANNER_WELCOME, WELCOME_LONG, reply_markup=kb_access())
        set_pm_ok(uid, True)
        asyncio.create_task(access_nurture(uid))
    except TelegramForbiddenError:
        set_pm_ok(uid, False)
    except Exception as e:
        logging.warning("PM send failed: %s", e)
def kb_done(n: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text=f"‚úÖ –Ø –ø–æ—Å–º–æ—Ç—Ä–µ–ª —É—Ä–æ–∫ {n}", callback_data=f"done:{n}"))
    return kb.as_markup()

def kb_subscribe_then_l3() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    # –∫–Ω–æ–ø–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É –≤ –¥–Ω–µ–≤–Ω–∏–∫ (tg invite link –≤ .env: DIARY_TG_JOIN_URL)
    if DIARY_TG_JOIN_URL:
        kb.row(InlineKeyboardButton(text="üìì –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–Ω–µ–≤–Ω–∏–∫", url=DIARY_TG_JOIN_URL))
    else:
        kb.row(InlineKeyboardButton(text="üìì –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–Ω–µ–≤–Ω–∏–∫", url=DIARY_URL))
    # –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–∞ "–∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
    kb.row(InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å ‚Äî –ü–†–û–í–ï–†–ò–¢–¨", callback_data="check_diary"))
    return kb.as_markup()

def kb_done(n: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text=f"‚úÖ –Ø –ø–æ—Å–º–æ—Ç—Ä–µ–ª —É—Ä–æ–∫ {n}", callback_data=f"done:{n}"))
    return kb.as_markup()
# —è–∫—â–æ —é–∑–µ—Ä –≤—ñ–¥–∫—Ä–∏–≤ —É—Ä–æ–∫, –∞–ª–µ –Ω–µ –Ω–∞—Ç–∏—Å–Ω—É–≤ ¬´–Ø –ø–æ—Å–º–æ—Ç—Ä–µ–ª¬ª
MARK_REMIND_DELAY_1 = int(os.getenv("MARK_REMIND_DELAY_1", "300"))  # 5 —Ö–≤
MARK_REMIND_DELAY_2 = int(os.getenv("MARK_REMIND_DELAY_2", "300"))

async def is_subscribed_telegram(user_id: int) -> bool:
    """
    True, –µ—Å–ª–∏ –¥–Ω–µ–≤–Ω–∏–∫ = Telegram-–∫–∞–Ω–∞–ª –∏ —é–∑–µ—Ä —Ç–∞–º —É—á–∞—Å—Ç–Ω–∏–∫.
    –¢—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π DIARY_TG_CHAT_ID (-100xxxxxxxxxx) –∏ —á—Ç–æ–±—ã –±–æ—Ç –±—ã–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ (–∏–ª–∏ —Ö–æ—Ç—è –±—ã –∏–º–µ–ª –ø—Ä–∞–≤–æ –≤–∏–¥–µ—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤).
    """
    if not DIARY_TG_CHAT_ID:
        return False  # –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ ‚Äî –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–µ—á–µ–≥–æ

    try:
        member = await bot.get_chat_member(DIARY_TG_CHAT_ID, user_id)
        return member.status in {
            ChatMemberStatus.MEMBER,
            ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.CREATOR,
        }
    except Exception:
        return False

async def send_url_only(chat_id: int, url: str, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞), –∫–∞–∫ —Ç—ã –ø—Ä–æ—Å–∏–ª."""
    try:
        await bot.send_message(chat_id, url, reply_markup=reply_markup, disable_web_page_preview=False)
    except Exception:
        await bot.send_message(chat_id, url, reply_markup=reply_markup)

async def remind_mark_done(user_id: int, n: int, delay: int):
    await asyncio.sleep(delay)
    if not is_watched(user_id, n):  # –¥–æ—Å—ñ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –ø–µ—Ä–µ–≥–ª—è–¥
        try:
            await bot.send_message(
                user_id,
                f"–¢—ã —É–∂–µ –æ—Ç–∫—Ä—ã–ª —É—Ä–æ–∫ {n}, –Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä. –ï—Å–ª–∏ –≤—Å—ë –ø–æ—Å–º–æ—Ç—Ä–µ–ª ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üëá",
                reply_markup=kb_done(n)
            )
        except Exception as e:
            logging.warning("remind_mark_done failed: %s", e)

def is_watched(uid: int, n: int) -> bool:
    d = _read()
    return bool(d.get("users", {}).get(str(uid), {}).get("watched", {}).get(str(n), False))

def set_watched(uid: int, n: int, watched: bool):
    d = _read()
    u = d.setdefault("users", {}).setdefault(str(uid), {})
    w = u.setdefault("watched", {})
    w[str(n)] = bool(watched)
    _write(d)
def kb_access() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üîë –ü–û–õ–£–ß–ò–¢–¨ –î–û–°–¢–£–ü", callback_data="open:1"))
    return kb.as_markup()

def kb_open(n: int) -> InlineKeyboardMarkup:
    labels = {1: "–û–¢–ö–†–´–¢–¨ –£–†–û–ö 1", 2: "–û–¢–ö–†–´–¢–¨ –£–†–û–ö 2", 3: "–û–¢–ö–†–´–¢–¨ –£–†–û–ö 3"}
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text=labels[n], callback_data=f"open:{n}"))
    return kb.as_markup()

def kb_open_l2() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="–û–¢–ö–†–´–¢–¨ –£–†–û–ö 2", callback_data="open:2"))
    return kb.as_markup()

def kb_diary_then_l3() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üìì –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–Ω–µ–≤–Ω–∏–∫", url=DIARY_URL))
    kb.row(InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è ‚Äî –û–¢–ö–†–´–¢–¨ –£–†–û–ö 3", callback_data="open:3"))
    return kb.as_markup()

def kb_buy_course() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üî• –í–∑—è—Ç—å –º–∏–Ω–∏-–∫—É—Ä—Å (999 –≥—Ä–Ω)", url=SITE_URL))
    return kb.as_markup()

def kb_apply_form() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", url=FORM_URL))
    return kb.as_markup()
def kb_deeplink() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üéÅ –ü–û–õ–£–ß–ò–¢–¨ –£–†–û–ö–ò", url=DEEP_LINK))
    return kb.as_markup()

def kb_open(n: int) -> InlineKeyboardMarkup:
    labels = {1: "–û–¢–ö–†–´–¢–¨ –£–†–û–ö 1", 2: "–û–¢–ö–†–´–¢–¨ –£–†–û–ö 2", 3: "–û–¢–ö–†–´–¢–¨ –£–†–û–ö 3"}
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text=labels[n], callback_data=f"open:{n}"))
    return kb.as_markup()

def kb_cta() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="–û–¢–ö–†–´–¢–¨ –°–ê–ô–¢", url=SITE_URL))
    return kb.as_markup()

def kb_access() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üîë –ü–û–õ–£–ß–ò–¢–¨ –î–û–°–¢–£–ü", callback_data="open:1"))
    return kb.as_markup()

# ========= –¢–ï–ö–°–¢–´/–ö–ê–†–¢–ò–ù–ö–ò =========
def teaser_text(n: int) -> str:
    if n == 1:
        return ("*–£—Ä–æ–∫ 1 –∏–∑ 3:* –ß—Ç–æ —Ç–∞–∫–æ–µ P2P –≤ 2025 –≥–æ–¥—É –∏ –ø–æ—á–µ–º—É —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å. üí°\n\n"
                "–ë–µ–∑ –≤–æ–¥—ã: –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã, –≥–¥–µ –∏ –∫–∞–∫ –Ω–∞—á–∞—Ç—å. –ü–æ—Å–ª–µ —É—Ä–æ–∫–∞ ‚Äî –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏.")
    if n == 2:
        return ("*–£—Ä–æ–∫ 2 –∏–∑ 3:* –ö–∞–∫ —è –∑–∞—Ä–∞–±–æ—Ç–∞–ª $50 000 –∏ –Ω–æ–≤—ã–π Mercedes –∑–∞ 3 –º–µ—Å—è—Ü–∞. üöÄ")
    return ("*–£—Ä–æ–∫ 3 –∏–∑ 3:* –°–≤—è–∑–∫–∞ –Ω–∞ –†2–†: –±—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å –∫ –ø–µ—Ä–≤–æ–º—É –ø—Ä–æ—Ñ–∏—Ç—É. üí∏")

# === URLs –∏–∑ .env ===
DIARY_URL = os.getenv("DIARY_URL", "https://instagram.com/your_diary_here")
FORM_URL  = os.getenv("FORM_URL",  "https://forms.gle/your_form_here")

# === –¢–ï–ö–°–¢–´, –∫–∞–∫ –¥–∞–ª –°—Ç–∞—Å ===
WELCOME_LONG = (
    "–ü—Ä–∏–≤–µ—Ç‚úåÔ∏è\n\n"
    "–£ –º–µ–Ω—è –¥–ª—è —Ç–µ–±—è –ø–æ–¥–∞—Ä–æ–∫, —Å—Ä–∞–∑—É 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —É—Ä–æ–∫–∞ –ø–æ P2P ü§ù\n\n"
    "–Ø –°—Ç–∞—Å –ì—Ä–∏–±–æ–≤—Å–∫–∏–π, —ç–∫—Å–ø–µ—Ä—Ç –≤ —Å—Ñ–µ—Ä–µ –†2–† —É–∂–µ –±–æ–ª–µ–µ 3 –ª–µ—Ç!\n"
    "–¢—É—Ç —Ç–µ–±—è –∂–¥–µ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤ –ø–æ –†2–† –∞—Ä–±–∏—Ç—Ä–∞–∂—É üöÄ\n\n"
    "–ù–∞—à–∞ —Ü–µ–ª—å ‚Äî –ø–æ–Ω—è—Ç—å –æ—Å–Ω–æ–≤—É –†2–† –∏ –≤—ã–π—Ç–∏ –Ω–∞ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –¥–æ—Ö–æ–¥ –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ!\n"
    "–Ø —Å–æ–±—Ä–∞–ª –¥–ª—è —Ç–µ–±—è –ø—Ä–∞–∫—Ç–∏–∫—É –∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã: —à–∞–≥ –∑–∞ —à–∞–≥–æ–º –ø–æ–∫–∞–∂—É, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç P2P –∏ –¥–æ–≤–µ–¥—É —Ç–µ–±—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!\n\n"
    "üëâ–í –ø–æ—Å–ª–µ–¥–Ω–µ–º —É—Ä–æ–∫–µ —Ç–µ–±—è –∂–¥–µ—Ç —Å–≤—è–∑–∫–∞, –ø—Ä–∏–º–µ–Ω–∏–≤ –∫–æ—Ç–æ—Ä—É—é —Ç—ã –≤—ã–π–¥–µ—à—å –Ω–∞ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –¥–æ—Ö–æ–¥ –≤ –†2–†.\n\n"
    "–ü–æ—ç—Ç–æ–º—É, –≤—ã–¥–µ–ª–∏ –≤—Ä–µ–º—è, –Ω–∞–ª–µ–π —á–∞—à–µ—á–∫—É —á–∞—è, —É—Å—Ç—Ä–æ–π—Å—è –ø–æ—É–¥–æ–±–Ω–µ–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º!\n\n"
    "‚úÖ –í –∏–Ω—Ç–µ–Ω—Å–∏–≤–µ —Ç–µ–±—è –∂–¥—É—Ç 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö  —É—Ä–æ–∫–∞:\n"
    "1Ô∏è‚É£ –ß—Ç–æ —Ç–∞–∫–æ–µ P2P –≤ 2025 –≥–æ–¥—É –∏ –ø–æ—á–µ–º—É —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.\n"
    "2Ô∏è‚É£ –ö–∞–∫ —è –∑–∞—Ä–∞–±–æ—Ç–∞–ª $50 000 –∏ –Ω–æ–≤—ã–π Mercedes –∑–∞ 3 –º–µ—Å—è—Ü–∞\n"
    "3Ô∏è‚É£ –°–≤—è–∑–∫–∞ –Ω–∞ –†2–†: 60$ –∑–∞ –¥–≤–∞ —á–∞—Å–∞\n\n"
    "–ì–æ—Ç–æ–≤ –Ω–∞—á–∏–Ω–∞—Ç—å? –ñ–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ü–û–õ–£–ß–ò–¢–¨ –î–û–°–¢–£–ü¬ª –∏ –Ω–∞—á–∏–Ω–∞–π —Å –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞ üî•"
)

AFTER_L1 = (
    "–¢—ã –±–æ–ª—å—à–æ–π –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫! üôå\n\n"
    "–Ø –≤–ª–æ–∂–∏–ª –≤ –Ω–µ–≥–æ –º–Ω–æ–≥–æ —É—Å–∏–ª–∏–π –∏ –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ –æ–Ω –±—ã–ª –¥–ª—è —Ç–µ–±—è –ø–æ–ª–µ–∑–µ–Ω. "
    "–ë—É–¥—É —Ä–∞–¥, –µ—Å–ª–∏ —Ç—ã –Ω–∞–ø–∏—à–µ—à—å –º–Ω–µ –æ—Ç–∑—ã–≤ –≤ Instagram –∏ –ø–æ–¥–µ–ª–∏—à—å—Å—è —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n\n"
    "–ê —Ç–µ–ø–µ—Ä—å –Ω–µ –±—É–¥–µ–º —Ç—è–Ω—É—Ç—å ‚Äî –¥–µ—Ä–∂–∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Ç–æ—Ä–æ–º—É —É—Ä–æ–∫—É üöÄ\n"
    "–ù–∞–ø–æ–º–∏–Ω–∞—é: –≤ —Ç—Ä–µ—Ç—å–µ–º —É—Ä–æ–∫–µ —è —Ä–∞—Å–∫—Ä–æ—é —Å—Ö–µ–º—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Å–º–æ–∂–µ—à—å –≤–Ω–µ–¥—Ä–∏—Ç—å –≤ —Å–≤–æ—é —Ä–∞–±–æ—Ç—É –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç 800$ –≤ –º–µ—Å—è—Ü!\n\n"
    "–ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø—Ä–∏—Å—Ç—É–ø–∞–π –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É üëÄ"
)

AFTER_L2 = (
    "–ë–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –Ω–∞—à–µ–≥–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤–∞ —É–∂–µ –ø–æ–∑–∞–¥–∏ üî•\n\n"
    "–°–µ–π—á–∞—Å —Ç–µ–±—è –∂–¥—ë—Ç —Ç—Ä–µ—Ç–∏–π, –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º —è –ø–æ–∫–∞–∂—É —Å—Ö–µ–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞ —Ç–≤–æ–∏—Ö –≥–ª–∞–∑–∞—Ö "
    "—Å–¥–µ–ª–∞—é +2% –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –¥–µ–ø–æ–∑–∏—Ç—É –≤—Å–µ–≥–æ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ò –¥–∞ ‚Äî –ø–æ–∑–∂–µ —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞ –º–Ω–æ–π —Ç–µ –∂–µ —Å–∞–º—ã–µ —à–∞–≥–∏!\n\n"
    "–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π –Ω–∞ –ø–æ—Ç–æ–º ‚Äî –∏–∑—É—á–∏ —ç—Ç—É —Å–≤—è–∑–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–ª—É—á–∞–π –¥–æ—Å—Ç—É–ø üëá"
)

GATE_BEFORE_L3 = (
    "–¢–∞–∫ –∂–µ, –ø–æ —Å–µ–∫—Ä–µ—Ç—É, —Ö–æ—á—É —Å —Ç–æ–±–æ–π –ø–æ–¥–µ–ª–∏—Ç—å—Å—è: —è –≤–µ–¥—É –¥–Ω–µ–≤–Ω–∏–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–∏—à—É –ø–æ—Å—Ç –∫–∞–∂–¥—ã–π –≤–µ—á–µ—Ä. \n"
    "–¢–∞–º —è –¥–µ–ª—é—Å—å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –∏–Ω—Å–∞–π—Ç–∞–º–∏, –±–∏–∑–Ω–µ—Å-—Å–æ–≤–µ—Ç–∞–º–∏, —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –∏ –¥–∞—é —Ü–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
    "–ù–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –Ω–∞–∑–∞–¥ —è –ø–æ—Å—Ç–∞–≤–∏–ª —Å–µ–±–µ —Ü–µ–ª—å ‚Äî –∫—É–ø–∏—Ç—å –Ω–æ–≤—ã–π Mercedes AMG —Å –Ω—É–ª—è –≤—Å–µ–≥–æ –∑–∞ 180 –¥–Ω–µ–π üî•\n"
    "–Ø –Ω–µ –∑–Ω–∞—é, –ø–æ–ª—É—á–∏—Ç—Å—è –ª–∏ —É –º–µ–Ω—è, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é —ç—Ç–æ–≥–æ.\n\n"
    "–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ª–µ–≥–∫–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å: –µ—Å–ª–∏ –∑–∞–º–µ—Ç–∏—à—å, —á—Ç–æ —è –Ω–µ –≤—ã–ª–æ–∂–∏–ª –ø–æ—Å—Ç –≤ –∫–∞–∫–æ–π-—Ç–æ –∏–∑ –¥–Ω–µ–π ‚Äî –Ω–∞–ø–∏—à–∏ –º–Ω–µ –æ–± —ç—Ç–æ–º –ª–∏—á–Ω–æ, –∏ —è —Å–∫–∏–Ω—É —Ç–µ–±–µ 50$.\n\n"
    "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ—Ç–∏–π —É—Ä–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º —è —Ä–∞—Å–∫—Ä–æ—é –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã —Å–≤—è–∑–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –∑–∞—Ä–∞–±–æ—Ç–∞–ª –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ —Å–∏—Ö –ø–æ—Ä, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–æ–π –¥–Ω–µ–≤–Ω–∏–∫ üëá"
)

BLOCK_6 = (
    "–•–æ—á–µ—à—å –æ—Å–≤–æ–∏—Ç—å P2P –∏ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç $100 –≤ –¥–µ–Ω—å?\n\n"
    "–Ø –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é —Ç–µ–±–µ –º–∏–Ω–∏-–∫—É—Ä—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º:\n"
    "‚Äî 5 —É—Ä–æ–∫–æ–≤ –ø–æ 30 –º–∏–Ω—É—Ç\n"
    "‚Äî —Ä–∞–±–æ—á–∞—è —Å–≤—è–∑–∫–∞ –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–æ—Å–∏—Ç –æ—Ç 100$ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –µ–µ –∑–∞ –º–Ω–æ–π –∏ –≤–Ω–µ–¥—Ä–∏—Ç—å –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å \n"
    "‚Äî –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã\n"
    "‚Äî –±–æ–Ω—É—Å ‚Äî –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ $100 –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ—Ç–æ–∫–æ–≤\n\n"
    "–ö–æ–ª-–≤–æ –º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ‚õîÔ∏è\n\n"
    "–¶–µ–Ω–∞ 999 –≥—Ä–Ω"
)

BLOCK_7 = (
    "–ö–∞–∫ —Ç—ã —É–∂–µ –ø–æ–Ω—è–ª, —É –º–µ–Ω—è –µ—Å—Ç—å –ª–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ P2P, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ—à–ª–∏ —Å–æ—Ç–Ω–∏ –ª—é–¥–µ–π. "
    "–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ —Ç–æ–º, —á—Ç–æ –≤—Å–µ –∫—É—Ä–∞—Ç–æ—Ä—ã ‚Äî —ç—Ç–æ –±—ã–≤—à–∏–µ —É—á–µ–Ω–∏–∫–∏, –∞ —Å—Ç—É–¥–µ–Ω—Ç—ã –≤—ã—Ö–æ–¥—è—Ç –Ω–∞ –¥–æ—Ö–æ–¥ –æ—Ç 1500$ —É–∂–µ –≤ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞.\n\n"
    "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –æ—Å–æ–±–µ–Ω–Ω—ã–º:\n"
    "‚Ä¢ –†–∞–±–æ—Ç–∞ –≤ —Å–∞–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –Ω–∏—à–µ –≤ –∫—Ä–∏–ø—Ç–µ, –≥–¥–µ —É—á–µ–Ω–∏–∫–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –¥–æ 10% –≤ –¥–µ–Ω—å.\n"
    "‚Ä¢ –ë–æ–ª–µ–µ 3 –ª–µ—Ç –º–æ–µ–≥–æ –æ–ø—ã—Ç–∞ –≤ —Å—Ñ–µ—Ä–µ, –∫–æ—Ç–æ—Ä—ã–º —è –¥–µ–ª—é—Å—å —á–µ—Ä–µ–∑ —Å–∞–º—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è.\n"
    "‚Ä¢ –î–µ—Å—è—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Å—Ö–µ–º –∏ —Å–≤—è–∑–æ–∫ –ø–æ –∞—Ä–±–∏—Ç—Ä–∞–∂—É: P2P, —Ñ–∞–Ω–¥–∏–Ω–≥, –º–µ–∂–±–∏—Ä–∂–µ–≤–æ–π, spot/futures, CEX/DEX. –ö–∞–∂–¥—ã–π –Ω–∞–π–¥—ë—Ç —Ç–æ, —á—Ç–æ –ø–æ–¥–æ–π–¥—ë—Ç –∏–º–µ–Ω–Ω–æ –µ–º—É.\n"
    "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∫–æ–º—å—é–Ω–∏—Ç–∏, –≥–¥–µ –µ—Å—Ç—å –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π, —Ç–∞–∫ –∏ –≤–ª–∞–¥–µ–ª—å—Ü—ã –∫—Ä—É–ø–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π.\n\n"
    "–ò —ç—Ç–æ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –∂–¥—ë—Ç –≤–Ω—É—Ç—Ä–∏ ‚Äî –º–Ω–æ–≥–æ–µ –æ—Å—Ç–∞—ë—Ç—Å—è –ø–æ–¥ –∑–∞–≤–µ—Å–æ–π üòâ\n\n"
    "–ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Ç–æ–∫, –∑–∞–ø–æ–ª–Ω—è–π –≥—É–≥–ª-—Ñ–æ—Ä–º—É –Ω–∏–∂–µ –∏–ª–∏ —Å–≤—è–∑—ã–≤–∞–π—Å—è —Å–æ –º–Ω–æ–π @"
)



# ========= –î–û–°–¢–£–ü/–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø =========
ACCESS_NUDGE_TEXTS = [
    "–í–∏–∂—É, —Ç—ã –µ—â—ë –Ω–µ –∑–∞–±—Ä–∞–ª –¥–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫–∞–º. –ù–∞–∂–º–∏ –Ω–∏–∂–µ ‚Äî –Ω–∞—á–Ω—ë–º —Å –ø–µ—Ä–≤–æ–≥–æ üëá",
    "–ù–∞–ø–æ–º–Ω—é –ø—Ä–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤: 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —É—Ä–æ–∫–∞ –∂–¥—É—Ç —Ç–µ–±—è. –ó–∞–±–µ—Ä–∏ –¥–æ—Å—Ç—É–ø üëá",
    "–î–∞–≤–∞–π –Ω–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å ‚Äî –∑–∞–±–∏—Ä–∞–π –¥–æ—Å—Ç—É–ø –∏ —Å—Ç–∞—Ä—Ç—É–µ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üëá",
]

async def access_nurture(user_id: int):
    """–°–ø–∞–º –¥–æ –Ω–∞–∂–∞—Ç–∏—è ¬´–ü–û–õ–£–ß–ò–¢–¨ –î–û–°–¢–£–ü¬ª. –ó–∞–ø—É—Å–∫–∞—Ç—å –ø–æ—Å–ª–µ /start."""
    for i, delay in enumerate(ACCESS_REM_DELAYS):
        await asyncio.sleep(delay)
        if get_stage(user_id) >= 1:
            break
        txt = ACCESS_NUDGE_TEXTS[min(i, len(ACCESS_NUDGE_TEXTS) - 1)]
        try:
            await bot.send_message(user_id, txt, reply_markup=kb_access())
        except TelegramForbiddenError:
            # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–∞–∫ –∏ –Ω–µ –¥–∞–ª Start / –∑–∞–∫—Ä—ã–ª –õ–°
            break
        except Exception as e:
            logging.warning("PM access nudge failed: %s", e)
            break

async def remind_if_not_opened(user_id: int, stage_expected: int, delay: int):
    """–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–∫ stage_expected, –µ—Å–ª–∏ —á–µ—Ä–µ–∑ delay –æ–Ω –Ω–µ –æ—Ç–∫—Ä—ã—Ç."""
    await asyncio.sleep(delay)
    if get_stage(user_id) < stage_expected:
        texts = {
            1: "–í–∏–∂—É, —Ç—ã –µ—â—ë –Ω–µ –æ—Ç–∫—Ä—ã–ª *–ø–µ—Ä–≤—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫*. –ó–∞–±–∏—Ä–∞–π –µ–≥–æ —Å–µ–π—á–∞—Å üëá",
            2: "–ù–∞–ø–æ–º–Ω—é: *—É—Ä–æ–∫ 2* –≤—Å—ë –µ—â—ë –∂–¥—ë—Ç —Ç–µ–±—è.üëá",
            3: "–û—Å—Ç–∞–ª—Å—è *—É—Ä–æ–∫ 3*. –î–∞–≤–∞–π –¥–æ–≤–µ–¥—ë–º –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ üí∏üëá",
        }
        try:
            await bot.send_message(user_id, texts[stage_expected], reply_markup=kb_open(stage_expected))
        except Exception as e:
            logging.warning("PM reminder failed: %s", e)

# ========= /start =========
@router.message(Command("start"))
async def on_start(m: Message):
    set_stage(m.from_user.id, 0)
    await send_block(m.chat.id, BANNER_WELCOME, WELCOME_LONG, reply_markup=kb_access())

# ========= –ö–ù–û–ü–ö–ê ¬´–û–¢–ö–†–´–¢–¨ –£–†–û–ö N¬ª =========
async def _approve_later(chat_id: int, user_id: int):
    try:
        await bot.approve_chat_join_request(chat_id, user_id)
    except Exception as e:
        logging.warning("Approve later failed: %s", e)


@router.callback_query(F.data.startswith("open:"))
@router.callback_query(F.data.startswith("open:"))
async def on_open(cb: CallbackQuery):
    await cb.answer()
    try:
        n = int(cb.data.split(":")[1])
    except Exception:
        return

    uid = cb.from_user.id

    # 1) –ñ—ë—Å—Ç–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä"
    if n == 2 and not is_watched(uid, 1):
        return await cb.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –£—Ä–æ–∫–∞ 1 ‚úÖ", show_alert=True)

    if n == 3 and not is_watched(uid, 2):
        return await cb.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –£—Ä–æ–∫–∞ 2 ‚úÖ", show_alert=True)

    # 2) –ì–µ–π—Ç –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –£—Ä–æ–∫–æ–º 3 (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª –¥–Ω–µ–≤–Ω–∏–∫–∞)
    if n == 3 and DIARY_TG_CHAT_ID:
        if not has_diary_request(uid):
            # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç-–≥–µ–π—Ç + –∫–Ω–æ–ø–∫–∏
            await send_block(cb.message.chat.id, "", GATE_BEFORE_L3, reply_markup=kb_subscribe_then_l3())
            return

    # 3) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) approve join-request –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞
    # chat_id_pending = PENDING_JOIN.pop(uid, 0)
    # target = chat_id_pending or CHANNEL_ID or 0
    # if n == 1 and target:
    #     asyncio.create_task(_approve_later(target, uid))

    # 4) –û—Ç–¥–∞—ë–º –¢–û–õ–¨–ö–û —Å—Å—ã–ª–∫—É (–∫–∞–∫ —Ç—ã –ø—Ä–æ—Å–∏–ª) + –∫–Ω–æ–ø–∫—É "–Ø –ø–æ—Å–º–æ—Ç—Ä–µ–ª" –¥–ª—è 1 –∏ 2
    URLS = {1: LESSON1_URL, 2: LESSON2_URL, 3: LESSON3_URL}
    await send_url_only(
        cb.message.chat.id,
        URLS[n],
        reply_markup=(kb_done(n) if n in (1, 2) else None)
    )

    # 5) –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é (—Ç–æ–ª—å–∫–æ, —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å "open:n" –ø–æ–≤—Ç–æ—Ä–Ω–æ; –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–∫–∞–º ‚Äî —á–µ—Ä–µ–∑ "done:n")
    stage = get_stage(uid)
    if n > stage:
        set_stage(uid, n)

    # 6) –î–ª—è —É—Ä–æ–∫–∞ 3 —Å—Ä–∞–∑—É —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ (–ø–æ—Å–ª–µ —Å—Å—ã–ª–∫–∏)
    if n == 3:
        await cb.message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üéâ –¢—ã –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ—Ç—å–µ–º—É —É—Ä–æ–∫—É.")
        await send_block(cb.message.chat.id, BANNER_BLOCK6, BLOCK_6, reply_markup=kb_buy_course())
        await send_block(cb.message.chat.id, BANNER_BLOCK7, BLOCK_7, reply_markup=kb_apply_form())
@router.callback_query(F.data.startswith("done:"))
async def on_done(cb: CallbackQuery):
    await cb.answer()
    try:
        n = int(cb.data.split(":")[1])
    except Exception:
        return

    uid = cb.from_user.id
    set_watched(uid, n, True)

    if n == 1:
        # AFTER_L1 + –∫–Ω–æ–ø–∫–∞ –Ω–∞ —É—Ä–æ–∫ 2
        await send_block(cb.message.chat.id, BANNER_AFTER1, AFTER_L1)
        await cb.message.answer("–û—Ç–∫—Ä—ã–≤–∞–π –≤—Ç–æ—Ä–æ–π —É—Ä–æ–∫ üëá", reply_markup=kb_open(2))

    elif n == 2:
        # AFTER_L2 + ¬´–ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –¥–Ω–µ–≤–Ω–∏–∫ ‚Üí –æ—Ç–∫—Ä—ã—Ç—å 3¬ª
        # (–µ—Å–ª–∏ —ç—Ç–æ Telegram-–∫–∞–Ω–∞–ª, –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∏–º –≤ open:3)
        await send_block(cb.message.chat.id, "", AFTER_L2)
        await send_block(cb.message.chat.id, BANNER_AFTER2, GATE_BEFORE_L3, reply_markup=kb_subscribe_then_l3())
# ========= –¢–ò–•–ò–ô on_join_request (–±–µ–∑ –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª) =========
@router.callback_query(F.data == "check_diary")
async def check_diary(cb: CallbackQuery):
    await cb.answer()
    uid = cb.from_user.id

    if DIARY_TG_CHAT_ID and has_diary_request(uid):
        URLS = {1: LESSON1_URL, 2: LESSON2_URL, 3: LESSON3_URL}
        await send_url_only(cb.message.chat.id, URLS[3])
        await cb.message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üéâ –¢—ã –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ—Ç—å–µ–º—É —É—Ä–æ–∫—É.")
        await send_block(cb.message.chat.id, BANNER_BLOCK6, BLOCK_6, reply_markup=kb_buy_course())
        await send_block(cb.message.chat.id, BANNER_BLOCK7, BLOCK_7, reply_markup=kb_apply_form())
        # ‚Üê –¥–æ–¥–∞–π:
        asyncio.create_task(_send_l3_video_later(cb.message.chat.id))
    else:
        # –∑–∞—è–≤–∫–∞ –µ—â—ë –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –±–æ—Ç–æ–º
        txt = (
            "–ü–æ–∫–∞ –Ω–µ –≤–∏–∂—É —Ç–≤–æ—é –∑–∞—è–≤–∫—É –≤ –¥–Ω–µ–≤–Ω–∏–∫.\n"
            "–ù–∞–∂–º–∏ ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–Ω–µ–≤–Ω–∏–∫¬ª, –æ—Ç–ø—Ä–∞–≤—å –∑–∞–ø—Ä–æ—Å –∏ –∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ –∂–º–∏ ¬´–ü–†–û–í–ï–†–ò–¢–¨¬ª."
        )
        await cb.message.answer(txt, reply_markup=kb_subscribe_then_l3())
def set_diary_request(uid: int, value: bool):
    d = _read()
    u = d.setdefault("users", {}).setdefault(str(uid), {})
    u["diary_request"] = bool(value)
    _write(d)
    logging.info("set_diary_request(uid=%s)=%s", uid, value)

def has_diary_request(uid: int) -> bool:
    d = _read()
    val = bool(d.get("users", {}).get(str(uid), {}).get("diary_request", False))
    logging.info("has_diary_request(uid=%s) -> %s", uid, val)
    return val
L3_FOLLOWUP_FILE_ID = os.getenv("L3_FOLLOWUP_FILE_ID", "").strip().rstrip("\u200b\ufeff\u2060")
L3_FOLLOWUP_CAPTION = os.getenv("L3_FOLLOWUP_CAPTION", "")
L3_FOLLOWUP_DELAY   = int(os.getenv("L3_FOLLOWUP_DELAY", "10"))

def _looks_like_videonote(fid: str) -> bool:
    return fid.startswith("DQAC")  # –µ–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è video_note

async def _send_l3_video_later(chat_id: int, delay: int | None = None):
    if not L3_FOLLOWUP_FILE_ID:
        return
    await asyncio.sleep(delay if delay is not None else L3_FOLLOWUP_DELAY)
    try:
        if _looks_like_videonote(L3_FOLLOWUP_FILE_ID):
            await bot.send_video_note(chat_id, L3_FOLLOWUP_FILE_ID)
        else:
            await bot.send_video(chat_id, L3_FOLLOWUP_FILE_ID, caption=(L3_FOLLOWUP_CAPTION or None))
    except Exception as e:
        # —Ñ–æ–ª–±–µ–∫: –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —è–∫ —Ç–µ–∫—Å—Ç –ø–æ—Å–∏–ª–∞–Ω–Ω—è/—ñ–¥
        txt = (L3_FOLLOWUP_CAPTION + "\n" if L3_FOLLOWUP_CAPTION else "") + L3_FOLLOWUP_FILE_ID
        try:
            await bot.send_message(chat_id, txt, disable_web_page_preview=False, parse_mode=None)
        except Exception as ee:
            logging.warning("L3 followup send failed: %s / %s", e, ee)

# /test_l3 —Ç–µ–∂ —á–∏—Ç–∞—î —Ç—É —Å–∞–º—É –∑–º—ñ–Ω–Ω—É:
@router.message(Command("test_l3"))
async def test_l3(m: Message):
    fid = L3_FOLLOWUP_FILE_ID
    if not fid:
        return await m.answer("L3_FOLLOWUP_FILE_ID –ø–æ—Ä–æ–∂–Ω—ñ–π —É .env", parse_mode=None)
    try:
        if _looks_like_videonote(fid):
            await bot.send_video_note(m.chat.id, fid)
            return await m.answer("‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ —è–∫ video note", parse_mode=None)
        else:
            await bot.send_video(m.chat.id, fid, caption=(L3_FOLLOWUP_CAPTION or None))
            return await m.answer("‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ —è–∫ –∑–≤–∏—á–∞–π–Ω–µ –≤—ñ–¥–µ–æ", parse_mode=None)
    except Exception as e:
        await m.answer(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏: {e}", parse_mode=None)
@router.message(F.forward_from_chat)
async def on_forwarded_from_channel(message: Message):
    ch = message.forward_from_chat
    await message.answer(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {ch.title}\nID: <code>{ch.id}</code>"
    )
@router.chat_join_request()
async def on_join_request(req: ChatJoinRequest):
    uid = req.from_user.id
    PENDING_JOIN[uid] = req.chat.id
    set_stage(uid, 0)

    try:
        await send_block(uid, BANNER_WELCOME, WELCOME_LONG, reply_markup=kb_access())
        set_pm_ok(uid, True)
        asyncio.create_task(access_nurture(uid))
    except TelegramForbiddenError:
        set_pm_ok(uid, False)  # –õ–° –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –º–æ–ª—á–∏–º
    except Exception as e:
        logging.warning("PM send failed: %s", e)

# ========= /diag –∏ /stats =========
@router.message(Command("diag"))
async def diag(m: Message):
    me = await bot.get_me()
    await m.answer(
        f"*Diag*\nBot: @{me.username}\nDEEP_LINK: {DEEP_LINK}\n"
        f"REM1/2/3={REM1_DELAY}/{REM2_DELAY}/{REM3_DELAY}\n"
        f"NEXT_AFTER_1/2={NEXT_AFTER_1}/{NEXT_AFTER_2}",
        parse_mode=ParseMode.MARKDOWN
    )

@router.message(Command("stats"))
async def stats(m: Message):
    if ADMIN_ID and m.from_user.id != ADMIN_ID:
        return
    d = _read()
    await m.answer(f"Users tracked: {len(d.get('users', {}))}")

from aiogram.enums import ContentType

def extract_file_id(msg: Message):
    ct = msg.content_type
    if ct == ContentType.PHOTO and msg.photo:
        return msg.photo[-1].file_id, ct
    if ct == ContentType.DOCUMENT and msg.document:
        return msg.document.file_id, ct
    if ct == ContentType.VIDEO and msg.video:
        return msg.video.file_id, ct
    if ct == ContentType.AUDIO and msg.audio:
        return msg.audio.file_id, ct
    if ct == ContentType.VOICE and msg.voice:
        return msg.voice.file_id, ct
    if ct == ContentType.VIDEO_NOTE and msg.video_note:
        return msg.video_note.file_id, ct
    if ct == ContentType.STICKER and msg.sticker:
        return msg.sticker.file_id, ct
    if ct == ContentType.ANIMATION and msg.animation:
        return msg.animation.file_id, ct
    if ct == ContentType.CONTACT and msg.contact:
        # —É –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –Ω–µ–º–∞—î file_id, –∞–ª–µ –ø–æ–∫–∞–∂–µ–º–æ payload –¥–ª—è —è—Å–Ω–æ—Å—Ç—ñ
        return None, ct
    if ct == ContentType.LOCATION and msg.location:
        return None, ct
    return None, ct
async def on_startup(app: web.Application):
    await bot.delete_webhook(drop_pending_updates=True)
    if not RENDER_EXTERNAL_URL:
        raise RuntimeError("RENDER_EXTERNAL_URL is required for webhook mode")
    await bot.set_webhook(
        url=f"{RENDER_EXTERNAL_URL}/webhook/{WEBHOOK_SECRET}",
        secret_token=WEBHOOK_SECRET,
    )
async def on_shutdown(app: web.Application):
    await bot.session.close()
async def handle_webhook(request: web.Request):
    if request.match_info.get("token") != WEBHOOK_SECRET:
        return web.Response(status=403)
    data = await request.json()
    update = Update.model_validate(data)
    dp = request.app["dp"]              # get dp from app context
    await dp.feed_update(bot, update)
    return web.Response(text="OK")    
@router.message()  # –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –±–æ—Ç—ñ/–≥—Ä—É–ø—ñ
async def any_dm_message(message: Message):
    fid, ct = extract_file_id(message)
    if fid:
        await message.reply(
            f"content_type: <b>{ct}</b>\nfile_id:\n<code>{fid}</code>"
        )
    else:
        await message.reply(f"content_type: <b>{ct}</b>\n(–¥–ª—è —Ü—å–æ–≥–æ —Ç–∏–ø—É –Ω–µ–º–∞—î file_id)")

@router.channel_post()  # –±—É–¥—å-—è–∫–∏–π –ø–æ—Å—Ç —É –∫–∞–Ω–∞–ª—ñ (–±–æ—Ç –º–∞—î –±–∞—á–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
async def any_channel_post(message: Message):
    fid, ct = extract_file_id(message)
    if fid:
        await message.reply(
            f"content_type: <b>{ct}</b>\nfile_id:\n<code>{fid}</code>"
        )
    else:
        await message.reply(f"content_type: <b>{ct}</b>\n(–Ω–µ–º–∞—î file_id)")    
def make_web_app():
    app = web.Application()
    dp = Dispatcher()
    dp.include_router(router)
    app["dp"] = dp
    app.router.add_post(f"/webhook/{{token}}", handle_webhook)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    return app
# ========= main =========
async def main():
    global DEEP_LINK
    me = await bot.get_me()
    DEEP_LINK = f"https://t.me/{me.username}?start=from_channel"
    print("Bot:", f"@{me.username}", "Deep-link:", DEEP_LINK)

    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass

    # –≤–∞–∂–Ω–æ: —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–∏–ø—ã –∞–ø–¥–µ–π—Ç–æ–≤ (–≤ —Ç.—á. chat_join_request)
    await router.start_polling(bot, allowed_updates=router.resolve_used_update_types())

if __name__ == "__main__":
    if RUN_MODE.lower() == "polling":
        asyncio.run(run_polling())
    else:

        web.run_app(make_web_app(), host="0.0.0.0", port=PORT)
